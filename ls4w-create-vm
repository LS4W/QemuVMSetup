#!/bin/bash

memory="1G"
iso="windows.iso"
enable_graphics="no"
image="windows10.qcow2"
graphics_arg="-nographics"
cores=1
vm_name="ls4w"
ovmf_vars="/usr/share/OVMF/OVMF_VARS_4M.fd"
ovmf_code="/usr/share/OVMF/OVMF_CODE_4M.fd"


## Progress bar borrowed from: https://github.com/fearside/ProgressBar
#!/bin/bash
# 1. Create ProgressBar function
# 1.1 Input is currentState($1) and totalState($2)
ProgressBar() {
# Process data
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*4)/10
    let _left=40-$_done
# Build progressbar string lengths
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:
# 1.2.1.1 Progress : [########################################] 100%
printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%"

}

check_process() {
	[ "$1" = "" ] && return 0
	[ `pgrep -n $1` ] && return 1 || return 0

}


POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
	-m|--memory)
	memory="$2"
	shift
	shift
	;;

	-i|--iso)
	iso="$2"
	shift
	shift
	;;

	-g|--enable-graphics)
	enable_graphics="$2"
	shift
	shift
	;;

	-h|--hdd-image)
	image="$2"
	shift
	shift
	;;

	-i|--cores)
	cores="$2"
	shift
	shift
	;;

	-n|--name)
	vm_name="$2"
	shift
	shift
	;;

	-o|--ovmf_code)
	ovmf_code="$2"
	shift
	shift
	;;

	-p|--ovmf_vars)
	ovmf_vars="$2"
	shift
	shift
	;;
esac
done

if [ "$enable_graphics" = "yes" ]; then
	graphics_arg="-vga qxl"
else
	graphics_arg="-nographic"
fi

# Get necessary file for UEFI boot
cp $ovmf_vars $image.fd

echo "Creating VM from $image. Memory: $memory, Graphics argument: $graphics_arg, booting with: $iso"
qemu-system-x86_64 \
-name guest=$vm_name,debug-threads=on \
-drive if=pflash,format=raw,readonly,file=$ovmf_code \
-drive if=pflash,format=raw,file=$image.fd \
-m $memory \
-smp $cores \
-machine type=q35,accel=kvm \
-no-reboot \
$graphics_arg \
-rtc base=localtime,driftfix=slew \
-global kvm-pit.lost_tick_policy=delay \
-global ICH9-LPC.disable_s3=1 \
-global ICH9-LPC.disable_s4=1 \
-boot strict=on \
-blockdev "{\"driver\":\"file\",\"filename\":\"$image\",\"node-name\":\"libvirt-2-storage\",\"auto-read-only\":true,\"discard\":\"unmap\"}" \
-blockdev '{"node-name":"libvirt-2-format","read-only":false,"driver":"qcow2","file":"libvirt-2-storage","backing":null}' \
-device ide-hd,bus=ide.0,drive=libvirt-2-format,id=sata0-0-0,bootindex=2 \
-blockdev "{\"driver\":\"file\",\"filename\":\"$iso\",\"node-name\":\"libvirt-1-storage\",\"auto-read-only\":true,\"discard\":\"unmap\"}" \
-blockdev '{"node-name":"libvirt-1-format","read-only":true,"driver":"raw","file":"libvirt-1-storage"}' \
-device ide-cd,bus=ide.1,drive=libvirt-1-format,id=sata0-0-1,bootindex=1 &>> ls4w-create-vm.log &
QEMU_PROC=$!

echo Please wait while windows installs...

while :
do
	vm_image_size=`du -k "$image" | cut -f1`
		
	ProgressBar $vm_image_size 10159656	

	if [ $vm_image_size -gt 10159656 ] ; then
		echo "\nDone with initial installation, waiting for VM to reboot."
		break;
	fi

	check_process $QEMU_PROC
	if [ $? -eq 0 ] ; then
		printf "\nqemu stopped before installation finished.\n"
		printf "Please check logs: ls4w-create-vm.log.\n"
		break
	fi

	sleep 1
done

wait
echo "Machine powered off."
